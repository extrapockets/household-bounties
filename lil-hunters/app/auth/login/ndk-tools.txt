Toolkit from NDK GitHub README:


// Import the NDK package
import NDK from "@nostr-dev-kit/ndk";

// Create a new NDK instance with explicit relays
ndk = new NDK({ explicitRelayUrls: ["wss://nos.lol", "wss://relay.snort.social"] });

// Now connect to specified relays
await ndk.connect();

// For logging in with NIP-07 browser extension:
// Import the package, NIP-07 signer and NDK event
import NDK, { NDKNip07Signer, NDKEvent } from "@nostr-dev-kit/ndk";

const nip07signer = new NDKNip07Signer();
const ndk = new NDK({ signer: nip07signer });

// NDK can now ask permission, via their NIP-07 extension, to:
// Read the user's public key
nip07signer.user().then(async (user) => {
    if (!!user.npub) {
        console.log("Permission granted to read their public key:", user.npub);
    }
});

// Sign and publish events
const ndkEvent = new NDKEvent(ndk);
ndkEvent.kind = 1;
ndkEvent.content = "Hello, world!";
ndkEvent.publish(); // This will trigger the extension to ask the user to confirm signing.

// Cache where a user or note might be found:
// Instantiating and using a cache adapter
const redisAdapter = new RedisAdapter(redisUrl);
const ndk = new NDK({ cacheAdapter: redisAdapter });

// Finding a single event or all events matching a filter
// You can fetch the first event or all events that match a given set of filters.
// Create a filter
const filter: NDKFilter = { kinds: [1], authors: [hexpubkey1, hexpubkey2] };

// Will return only the first event
event = await ndk.fetchEvent(filter);

// Will return all found events
events = await ndk.fetchEvents(filter);

// Creating and publishing events
const ndk = new NDK({ explicitRelays, signer });
const event = new NDKEvent(ndk);
event.kind = 1;
event.content = "PV Nostr! 🤙🏼";
await ndk.publish(event);

// Reacting to an event
// Find the first event from @jack, and react/like it.
const event = await ndk.fetchEvent({ author: "jack@cashapp.com" })[0];
await event.react("🤙");